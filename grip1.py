# -*- coding: utf-8 -*-
"""Grip1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iN_5ZEkuBMol1aIubutdoxl5XllZ38_i
"""

#Author: Sreya K

#Task #2: Prediction using unsupervised machine learning.

#GRIP@ The Sparks Foundation

#Prediction using Supervised ML 
#Motivation:Percentage prediction of a student based on the number of study hours.
#This is a simple linear regression task as it involves just two variables.

#importing the required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#reading in the data from source
dataset=pd.read_csv("https://raw.githubusercontent.com/AdiPersonalWorks/Random/master/student_scores%20-%20student_scores.csv")
dataset.head(10)

#Discover and visualize the data to gain insights
dataset.info()

#finding statistical properties of the data
dataset.describe()

#finding number of rows and columns in the data
dataset.shape

#checking the existence of missing or null values
dataset.isnull().sum()

#Scatter diagram for hours vs. scores of students
dataset.plot(x="Hours",y="Scores",style="o")
plt.xlabel("Hours Studied")
plt.ylabel("Obtained Scores")
plt.title("Scatter plot for Hours vs. Scores of the students")
plt.show()

#reshaping the data dividing it into attributes and labels
x=dataset.iloc[:,:-1]
x.head(10)

y=dataset.iloc[:,1]
y.head(10)

#Splitting the data into training and testing sets and training the algorithm
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)
#test size=0.2 means 20 percent of the data is used for testing

#Plotting the regression line
from sklearn.linear_model import LinearRegression
model=LinearRegression()
model.fit(x_train,y_train)
y_predicted=model.predict(x_train)

#Equation of regression line
print(model.intercept_)
print(model.coef_)
lr_regression=model.coef_*x_train+model.intercept_
print("Equation for the fitted regression is:")
print("Score=",model.coef_,"Hours=",model.intercept_)

#Plotting the regression line
plt.plot(x,y,"o",color="g")
plt.plot(x_train,lr_regression,color="b")
plt.xlabel("Hours")
plt.ylabel("Scores")
plt.title("Plot for the fitted regression line for the given data")

#Prediction of scores based on testing dataset
y_predic=model.predict(x_test)
print("The prediction of scores based on testing: ",y_predic)

#checking the accuracy of the model
model.score(x_test,y_test)

#a prediction of score based on 5 hours of study
model.predict([[5]])

#Comparing the Actual and the Predicted Scores

#Comparing actual and predicted scores of students
df=pd.DataFrame({"Actual": y_test,"Predicted": y_predic})
df

#Comparing the Actual and the Predicted Scores using a Bar Diagram

#Bar diagram showing actual and predicted scores of students
df.plot(kind="bar",color=("b","g"))
plt.xlabel("Index")
plt.ylabel("Scores")
plt.title("Comparison between actual and predicted values of scores on basis of hours of study")
plt.show()

#Evaluating the model peformance and predicting it's accuracy
from sklearn import metrics
print("Mean Absolute Error:",metrics.mean_absolute_error(y_test,y_predic))
print("Mean Squared Error:",metrics.mean_squared_error(y_test,y_predic))
print("Root Mean Squared Error:",np.sqrt(metrics.mean_squared_error(y_test,y_predic)))
print("R-2:",metrics.r2_score(y_test,y_predic))

#Predicting the Percentage Score of a student who studies for 9.25 hours a day

#Prediction of percentage score of a student who studies for 9.25 hours per day
print("The expected percentage score of a student who studies 9.25 hours per day is:",model.predict([[9.25]]))

#Conclusion

#In this task, we have fitted a suitable linear regression model involving two variables for the Goodness of Fit.We have found that our model explains 94.5% of the variation in scores of the student(dependent variable) based on number of hours of study(independent variable).

#Double-click (or enter) to edit

#We conclude from the fitted model that a student studying for 9.25 hours per day is expected to score 93.69%.

#Thank you